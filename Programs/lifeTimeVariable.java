/* Here is another important point to remember: variables are created when their scope is entered, and destroyed when their scope is left. This means that a variable will not hold its value once it has gone out of scope. Therefore, variables declared within a method will not hold their values between calls to that method. Also, a variable declared within a block will lose its value when the block is left. Thus, the lifetime of a variable is confined to its scope.

If a variable declaration includes an initializer, then that variable will be reinitialized each time the block in which it is declared is entered. For example, consider the next 
program:

// Demonstrate lifetime of a variable. */

class LifeTime {
public class lifeTimeVariable {
 public static void main(String args[]) {
 int x;
 for(x = 0; x < 3; x++) {
 int y = -1; // y is initialized each time block is entered
 System.out.println("y is: " + y); // this always prints -1
 y = 100;
 System.out.println("y is now: " + y);
 }
 }
}
}

/*
The output generated by this program is shown here:
 y is: -1
 y is now: 100
 y is: -1
 y is now: 100
 y is: -1
 y is now: 100
 As you can see, y is reinitialized to â€“1 each time the inner for loop is entered. Even though 
it is subsequently assigned the value 100, this value is lost.
}
*/